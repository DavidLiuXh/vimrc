"
" A (not so) minimal vimrc.
"
call plug#begin('~/.vim/plugged')

"Plug 'junegunn/vim-easy-align'
Plug 'octol/vim-cpp-enhanced-highlight' "语法高亮
Plug 'justinmk/vim-dirvish'
Plug 'Yggdroot/LeaderF'
Plug 'scrooloose/nerdtree'
Plug 'derekwyatt/vim-scala'
"Plug 'Valloric/YouCompleteMe'
Plug 'fatih/vim-go'
Plug 'majutsushi/tagbar'
Plug 'MattesGroeger/vim-bookmarks'
Plug 'ludovicchabant/vim-gutentags'
"Plug 'skywind3000/vim-auto-popmenu'
"ctag 使用 https://ctags.io/
Plug 'rhysd/vim-clang-format'

call plug#end()


" vim-auto-popmemu
" 设定需要生效的文件类型，如果是 "*" 的话，代表所有类型
"let g:apc_enable_ft = {'*':1}
" 设定从字典文件以及当前打开的文件里收集补全单词，详情看 ':help cpt'
"set cpt=.,k,w,b
" 不要自动选中第一个选项。
"set completeopt=menu,menuone,noselect
" 禁止在下方显示一些啰嗦的提示
"set shortmess+=c

" replace \ with ,
:let mapleader=","                                                                                                                                                           

"tagbar
nmap <F8> :TagbarToggle<CR>
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : '~/go/bin/gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_gotags_bin='~/go/bin/gotags'

" You want Vim, not vi. When Vim finds a vimrc, 'nocompatible' is set anyway.
" We set it explicitely to make our position clear!
set nocompatible

colorscheme torte
set guioptions-=T

if has("gui_gtk2")
  "set guifont=DejaVu\ Sans\ Mono\ 14
    set guifont=Monospace\ 11
elseif has("gui_macvim")
    set guifont=DejaVu_Sans_Mono:h11
end
    set guifont=Monospace\ 11

filetype plugin indent on  " Load plugins according to detected filetype.
syntax on                  " Enable syntax highlighting.

set autoindent             " Indent according to previous line.
set expandtab              " Use spaces instead of tabs.
set softtabstop =2        " Tab key indents by 4 spaces
set shiftwidth  =2         " >> indents by 4 spaces.
set shiftround             " >> indents to next multiple of 'shiftwidth'.
autocmd FileType c,cpp,cxx,cc,h,hxx,hpp set shiftwidth=2 | set expandtab


set backspace   =indent,eol,start  " Make backspace work as you would expect.
set hidden                 " Switch between buffers without having to save first.
"set laststatus  =2         " Always show statusline.
"set display     =lastline  " Show as much as possible of the last line.

set showmode               " Show current mode in command-line.
set showcmd                " Show already typed keys when more are expected.

set incsearch              " Highlight while searching with / or ?.
set hlsearch               " Keep matches highlighted.

set ttyfast                " Faster redrawing.
set lazyredraw             " Only redraw when necessary.

set splitbelow             " Open new windows below the current window.
set splitright             " Open new windows right of the current window.

"set cursorline             " Find the current line quickly.
set wrapscan               " Searches wrap around end-of-file.
set report      =0         " Always report changed lines.
set synmaxcol   =200       " Only highlight the first 200 columns.

set list                   " Show non-printable characters.
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

" The fish shell is not very compatible to other shells and unexpectedly
" breaks things that use 'shell'.
if &shell =~# 'fish$'
  set shell=/bin/bash
endif

" Put all temporary files under the same directory.
" https://github.com/mhinz/vim-galore#handling-backup-swap-undo-and-viminfo-files
set backup
set backupdir   =$HOME/.vim/files/backup/
set backupext   =-vimbackup
set backupskip  =
set directory   =$HOME/.vim/files/swap//
set updatecount =100
set undofile
set undodir     =$HOME/.vim/files/undo/
set viminfo     ='100,n$HOME/.vim/files/info/viminfo

"set ctags
set tags=./.tags,.tags,./tags,tags

""cs add . .
if filereadable("cscope.out")
    cs add cscope.out
endif
set cscopequickfix=s-,c-,d-,i-,t-,e- 

" 自动添加 ) } ]
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {<CR>}<ESC>O
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i

function! ClosePair(char)
	 if getline('.')[col('.') - 1] == a:char
		return "\<Right>"
	 else
		return a:char
	 endif
endfunction

"set LeaderF plugin
let g:Lf_ShortcutF = '<c-p>'
let g:Lf_ShortcutB = '<m-n>'
noremap <silent> <F7> :LeaderfMru<cr>
noremap <silent> <F4> :LeaderfFunction<cr>
noremap <silent> <F5> :LeaderfBuffer<cr>
noremap <silent> <F6> :LeaderfTag<cr>
let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }

let g:Lf_RootMarkers = ['.project', '.root', '.svn', '.git']
let g:Lf_WorkingDirectoryMode = 'Ac'
let g:Lf_WindowHeight = 0.30
let g:Lf_CacheDirectory = expand('~/.vim/cache')
let g:Lf_ShowRelativePath = 0
let g:Lf_HideHelp = 1
let g:Lf_StlColorscheme = 'powerline'
let g:Lf_PreviewResult = {'Function':0, 'BufTag':0}
let g:Lf_UseCache = 0
let g:Lf_UseMemoryCache = 0

"set NERDTree
map <C-n> :NERDTreeToggle<CR>
"autocmd vimenter * NERDTree
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

set number

"set ycm
"let g:ycm_add_preview_to_completeopt = 0
"let g:ycm_show_diagnostics_ui = 0
"let g:ycm_server_log_level = 'info'
"let g:ycm_min_num_identifier_candidate_chars = 2
"let g:ycm_collect_identifiers_from_comments_and_strings = 1
"let g:ycm_complete_in_strings=1
"let g:ycm_key_invoke_completion = '<c-d>'
"打开vim时不再询问是否加载ycm_extra_conf.py配置  
"let g:ycm_confirm_extra_conf=1
"let g:ycm_global_ycm_extra_conf='~/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py'
"let g:syntastic_cpp_compiler = 'g++'
"let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libc++'
"let g:ycm_semantic_triggers =  {
"      \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{ 2}'],
"      \ 'cs,lua,javascript': ['re!\w{2}'],
"      \ }


set completeopt=menu,menuone


if has("gui_running")
  highlight PMenu ctermfg=0 ctermbg=242 guifg=black guibg=darkgrey
  highlight PMenuSel ctermfg=242 ctermbg=8 guifg=darkgrey guibg=black
end

"sudo apt-get install python-pip
""sudo pip install ici
"ici plugin: \y
"nmap <Leader>y :!echo --==<C-R><C-w>==-- ;ici <C-R><C-W><CR>

map <Leader>p :tabp<CR>                                                                                                                                                      
map <Leader>n :tabn<CR>
map <Leader>f :tabfirst<CR>                                                                                                                                                                                    
map <Leader>l :tablast<CR>

if has("termguicolors")
    " enable true color
    set termguicolors
endif
"
"let g:TerminusFocusReporting=0

" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']

" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'

" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
endif

" 配置clang-format
let g:clang_format#code_style = 'google'
autocmd FileType c,cc,cpp,h,hpp ClangFormatAutoEnable

" 配置autopep8
" pip3 install autopep8
au BufWritePost *.py execute ':silent !autopep8 --in-place %'
