#include <iostream>
#include <chrono>
#include <ratio>
#include <vector>
#include <memory>
#include <string>
#include <thread>
#include <signal.h>
#include <stdlib.h>
#include <glog/logging.h>

#include "qcm.h"

int main(int argc, char* argv[]) {
  
  std::string ip;
  std::vector<std::string> keys;
  bool if_load_local_file_when_connect_failed = true;
  if (argc >= 4) {
    ip.append(argv[1]);
    std::string arg_str = argv[2];
    if (arg_str == "no") {
      if_load_local_file_when_connect_failed = false;
    }
    for (int i = 3; i < argc; i++) {
      std::string key;
      std::cout << "your key = " << argv[i] << std::endl;
      key.append(argv[i]);
      keys.push_back(key);
    }
  } else {
    std::cout << "usage:\n ./bench ip yes/no key1 key2...\n";
    exit(0);
  }

  std::cout << "qcm client will connect to " << ip << std::endl;
  std::this_thread::sleep_for(std::chrono::seconds(2));

  /*first step*/
  std::unique_ptr<peanuts::Qcm> client = std::unique_ptr<peanuts::Qcm>(new peanuts::Qcm(ip, 9527, "./log", "./tmp"));

  for (unsigned int i = 0; i < keys.size(); i++) {
    std::cout << "qcm client " << " will try to get the key: " << keys[i] << std::endl;
    
    /*second step*/
    std::string value = client->GetConf(keys[i], if_load_local_file_when_connect_failed);

    /*then do your own work*/
    if (value != "") {
      std::cout << "qcm client "  << " got key: " << keys[i]
	      << ", value: [" << value << "]" << std::endl << std::endl;
      std::this_thread::sleep_for(std::chrono::seconds(2));
    } else { /*key not found or error*/
      std::cout << "qcm client can not get key: " << keys[i] << std::endl;
    }
  }

  /*in the end*/
}
