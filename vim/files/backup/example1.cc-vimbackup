#include <iostream>
#include <chrono>
#include <vector>
#include <memory>
#include <string>
#include <thread>
#include <signal.h>
#include <stdlib.h>

#include "qcm.h"

std::unique_ptr<peanuts::Qcm> client;

class QcmClientCallback: public peanuts::Callback {
  public:
    virtual void handler(const std::string& key, const std::string& value, bool if_connected) {
      if (if_connected) {
        std::cout << "connected, config key: " << key
          << " | config value: " << value << std::endl;
      } else {
        std::cout << "not connected, config key: " << key
          << " | config value: " << value << std::endl;
      }
    }
};

int main(int argc, char* argv[]) {
  
  std::string ip;
  std::vector<std::string> keys;

  bool is_use_callback = false;
  
  if (argc >= 4) {
    ip.append(argv[1]);
    std::string call;
    call.append(argv[2]);
    if (call == "yes") {
      is_use_callback = true;
    }
    for (int i = 3; i < argc; i++) {
      std::string key;
      std::cout << "will add key: " << argv[i] << std::endl;
      key.append(argv[i]);
      keys.push_back(key);
    }
  } else {
    std::cout << "usage:\n ./example1 ip yes/no key1 key2 ...\n";
    exit(0);
  }

  std::shared_ptr<QcmClientCallback> callback(new QcmClientCallback());

  client = std::unique_ptr<peanuts::Qcm>(new peanuts::Qcm(ip, 9527, "./log", "./tmp"));

  if (nullptr != callback && is_use_callback == true) {
    client->SetCallback(callback.get());
  }
  for (unsigned int j = 0; j < keys.size(); j ++) {
    client->AddConf(keys[j]);
  }

  std::cout << "qcm client will connect to " << ip << std::endl;
  std::this_thread::sleep_for(std::chrono::seconds(2));

  client->Start();
  std::cout << "qcm client connected to server " << ip << " successfully" << std::endl;

  /**do your own work**/
  std::this_thread::sleep_for(std::chrono::seconds(70));

  //in the end
  client->Stop();
}
